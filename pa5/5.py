import gmpy2
from gmpy2 import mpz



p = mpz(13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084171)
g = mpz(11717829880366207009516117596335367088558084999998952205599979459063929499736583746670572176471460312928594829675428279466566527115212748467589894601965568)
h = mpz(3239475104050450443565264378728065788649097520952449527834792452971981976143292558073856937958553180532878928001494706097394108577585732452307673444020333)
B = mpz(2**20)
x0, x1 = 0, 0




d = {}
for i in range(B):
    d[i] = pow(g, B*i, p)
    if i == 2**19: print("1")


##test = 0
##flag = True
##for j in range(B):
##    test = h * cryptomath.findModInverse(pow(g,j,p),p) % p
##    for key in d.keys():
##        if d[key] == test:
##            x0, x1, flag = key, j, False
##            break
##    if flag == False: break
##    if j == 100: print ("2")
##
##print(x0*B + x1)


            

    
